package com.liao.util.base;

/**
 * @ProjectName JavaJvmStudyInfo
 * @Author LHB
 * @Data 2020/6/15 15:27
 * @Version 1.0
 * @Description final,static,this,super 关键字总结
 */
public class KeysInfo {


    /**
     *static 关键字主要有以下四种使用场景：

     修饰成员变量和成员方法:
     被 static 修饰的成员属于类，不属于单个这个类的某个对象，被类中所有对象共享，可以并且建议通过类名调用。
     被static 声明的成员变量属于静态成员变量，静态变量 存放在 Java 内存区域的方法区。
     调用格式：类名.静态变量名 类名.静态方法名()
     静态代码块:
     静态代码块定义在类中方法外, 静态代码块在非静态代码块之前执行(静态代码块—>非静态代码块—>构造方法)。
     该类不管创建多少对象，静态代码块只执行一次.
     静态内部类（static修饰类的话只能修饰内部类）：
     静态内部类与非静态内部类之间存在一个最大的区别:
      非静态内部类在编译完成之后会隐含地保存着一个引用，该引用是指向创建它的外围类，但是静态内部类却没有。
     没有这个引用就意味着：1. 它的创建是不需要依赖外围类的创建。2. 它不能使用任何外围类的非static成员变量和方法。
     静态导包(用来导入类中的静态资源，1.5之后的新特性):
     格式为：import static 这两个关键字连用可以指定导入某个类中的指定静态资源，并且不需要使用类名调用类中静态成员，
     可以直接使用类中静态成员变量和成员方法。
     */
    private static  String  datas="1";


    /**
     *类中所有的private方法都隐式地指定为final。
     */
    private void  finalInfo(){

    }






}
